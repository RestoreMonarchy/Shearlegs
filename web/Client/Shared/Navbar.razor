<nav class="navbar navbar-expand-lg navbar-light bg-light">
    <div class="container">
        <a class="navbar-brand" href="/">
            <img src="/icon-512.png" alt="" width="42" height="42">
        </a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarToggler">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarToggler">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                <li class="nav-item">
                    <a class="nav-link" href="/">Home</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/reports">Reports</a>
                </li>
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown">
                        Admin
                    </a>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" href="/admin/reports">Reports</a></li>
                    </ul>
                </li>
            </ul>
            @if (state.User == null)
            {
                <EditForm class="d-flex" Model="Params" OnValidSubmit="SignInAsync">
                    <InputText class="form-control me-2" @bind-Value="Params.Name" />
                    <InputText class="form-control me-2" type="password" @bind-Value="Params.Password" />
                    <button class="btn btn-outline-success" type="submit">Sign In</button>
                </EditForm>
            }
            else
            {
                <div class="d-flex">
                    <a href="/signout" class="btn btn-primary">@state.User.Name Sign Out</a>
                </div>
            }

        </div>
    </div>
</nav>

@code {

    [Inject]
    public HttpClient HttpClient { get; set; }
    [Inject]
    public AuthenticationStateProvider AuthenticationState { get; set; }

    private CustomAuthenticationProvider state => (CustomAuthenticationProvider)AuthenticationState;

    public LoginParams Params { get; set; } = new LoginParams();

    public async Task SignInAsync()
    {
        await HttpClient.PostAsJsonAsync("signin", Params);
    }
}